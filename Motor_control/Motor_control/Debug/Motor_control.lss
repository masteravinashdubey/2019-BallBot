
Motor_control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002f0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000374  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001340  00000000  00000000  00000444  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000cb4  00000000  00000000  00001784  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005e9  00000000  00000000  00002438  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000130  00000000  00000000  00002a24  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000063c  00000000  00000000  00002b54  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004a7  00000000  00000000  00003190  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00003637  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	3a c0       	rjmp	.+116    	; 0x13e <__vector_50>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	60 d0       	rcall	.+192    	; 0x1b6 <main>
  f6:	fa c0       	rjmp	.+500    	; 0x2ec <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <timer5_init>:
	PORTK = 0x2A;
}

void rotate_clock (void)
{
	PORTK = 0x15;
  fa:	e1 e2       	ldi	r30, 0x21	; 33
  fc:	f1 e0       	ldi	r31, 0x01	; 1
  fe:	10 82       	st	Z, r1
 100:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__TEXT_REGION_LENGTH__+0x700125>
 104:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
 108:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 10c:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
 110:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
 114:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
 118:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
 11c:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>
 120:	89 ea       	ldi	r24, 0xA9	; 169
 122:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
 126:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <__TEXT_REGION_LENGTH__+0x700122>
 12a:	8b e0       	ldi	r24, 0x0B	; 11
 12c:	80 83       	st	Z, r24
 12e:	08 95       	ret

00000130 <init_timer>:
 130:	f8 94       	cli
 132:	e3 df       	rcall	.-58     	; 0xfa <timer5_init>
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
 13a:	78 94       	sei
 13c:	08 95       	ret

0000013e <__vector_50>:
 13e:	1f 92       	push	r1
 140:	0f 92       	push	r0
 142:	0f b6       	in	r0, 0x3f	; 63
 144:	0f 92       	push	r0
 146:	11 24       	eor	r1, r1
 148:	0f 90       	pop	r0
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	0f 90       	pop	r0
 14e:	1f 90       	pop	r1
 150:	18 95       	reti

00000152 <motor_init>:
 152:	8f ef       	ldi	r24, 0xFF	; 255
 154:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
 158:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
 15c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x70010a>
 160:	08 95       	ret

00000162 <forward>:
}

void forward (void)
{
	PORTK = 0x24;
 162:	84 e2       	ldi	r24, 0x24	; 36
 164:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
}

// Function for robot motor-a velocity control
void b_velocity(unsigned char b_motor)
{
	OCR5BL = (unsigned char)b_motor;
 168:	8f ef       	ldi	r24, 0xFF	; 255
 16a:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
}

// Function for robot motor-a velocity control
void c_velocity(unsigned char c_motor)
{
	OCR5CL = (unsigned char)c_motor;
 16e:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>
 172:	08 95       	ret

00000174 <backward>:
	c_velocity(255);
}

void backward (void)
{
	PORTK = 0x18;
 174:	88 e1       	ldi	r24, 0x18	; 24
 176:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
}

// Function for robot motor-a velocity control
void b_velocity(unsigned char b_motor)
{
	OCR5BL = (unsigned char)b_motor;
 17a:	8f ef       	ldi	r24, 0xFF	; 255
 17c:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
}

// Function for robot motor-a velocity control
void c_velocity(unsigned char c_motor)
{
	OCR5CL = (unsigned char)c_motor;
 180:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>
 184:	08 95       	ret

00000186 <right>:
	c_velocity(255);
}

void right (void)
{
	PORTK = 0x29;
 186:	89 e2       	ldi	r24, 0x29	; 41
 188:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
}

// Function for robot motor-a velocity control
void a_velocity(unsigned char a_motor)
{
	OCR5AL = (unsigned char)a_motor;
 18c:	8f ef       	ldi	r24, 0xFF	; 255
 18e:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
}

// Function for robot motor-a velocity control
void b_velocity(unsigned char b_motor)
{
	OCR5BL = (unsigned char)b_motor;
 192:	8b e9       	ldi	r24, 0x9B	; 155
 194:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
}

// Function for robot motor-a velocity control
void c_velocity(unsigned char c_motor)
{
	OCR5CL = (unsigned char)c_motor;
 198:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>
 19c:	08 95       	ret

0000019e <left>:
	c_velocity(155);
}

void left (void)
{
	PORTK = 0x16;
 19e:	86 e1       	ldi	r24, 0x16	; 22
 1a0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
}

// Function for robot motor-a velocity control
void a_velocity(unsigned char a_motor)
{
	OCR5AL = (unsigned char)a_motor;
 1a4:	8f ef       	ldi	r24, 0xFF	; 255
 1a6:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
}

// Function for robot motor-a velocity control
void b_velocity(unsigned char b_motor)
{
	OCR5BL = (unsigned char)b_motor;
 1aa:	8b e9       	ldi	r24, 0x9B	; 155
 1ac:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
}

// Function for robot motor-a velocity control
void c_velocity(unsigned char c_motor)
{
	OCR5CL = (unsigned char)c_motor;
 1b0:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>
 1b4:	08 95       	ret

000001b6 <main>:
	c_velocity(155);
}


int main(void)
{
 1b6:	ef 92       	push	r14
 1b8:	ff 92       	push	r15
 1ba:	0f 93       	push	r16
 1bc:	1f 93       	push	r17
 1be:	cf 93       	push	r28
 1c0:	df 93       	push	r29
	init_timer();
 1c2:	b6 df       	rcall	.-148    	; 0x130 <init_timer>
	motor_init();
 1c4:	c6 df       	rcall	.-116    	; 0x152 <motor_init>
 1c6:	8a e2       	ldi	r24, 0x2A	; 42
	OCR5CL = (unsigned char)c_motor1;
}

void rotate_anticlock(void)
{
	PORTK = 0x2A;
 1c8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
 1cc:	0f 2e       	mov	r0, r31
	OCR5CL = (unsigned char)c_motor;
}

void all_in_one_velocity (unsigned char a_motor1, unsigned char b_motor1, unsigned char c_motor1)
{
	OCR5AL = (unsigned char)a_motor1;
 1ce:	f8 e2       	ldi	r31, 0x28	; 40
 1d0:	ef 2e       	mov	r14, r31
 1d2:	ff 24       	eor	r15, r15
 1d4:	f3 94       	inc	r15
 1d6:	f0 2d       	mov	r31, r0
 1d8:	8f ef       	ldi	r24, 0xFF	; 255
 1da:	f7 01       	movw	r30, r14
 1dc:	80 83       	st	Z, r24
 1de:	0a e2       	ldi	r16, 0x2A	; 42
	OCR5BL = (unsigned char)b_motor1;
 1e0:	11 e0       	ldi	r17, 0x01	; 1
 1e2:	f8 01       	movw	r30, r16
 1e4:	80 83       	st	Z, r24
 1e6:	cc e2       	ldi	r28, 0x2C	; 44
	OCR5CL = (unsigned char)c_motor1;
 1e8:	d1 e0       	ldi	r29, 0x01	; 1
 1ea:	88 83       	st	Y, r24
 1ec:	ff ef       	ldi	r31, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ee:	2f ef       	ldi	r18, 0xFF	; 255
 1f0:	89 e5       	ldi	r24, 0x59	; 89
 1f2:	f1 50       	subi	r31, 0x01	; 1
 1f4:	20 40       	sbci	r18, 0x00	; 0
 1f6:	80 40       	sbci	r24, 0x00	; 0
 1f8:	e1 f7       	brne	.-8      	; 0x1f2 <main+0x3c>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <main+0x46>
 1fc:	00 00       	nop
 1fe:	f7 01       	movw	r30, r14
	OCR5CL = (unsigned char)c_motor;
}

void all_in_one_velocity (unsigned char a_motor1, unsigned char b_motor1, unsigned char c_motor1)
{
	OCR5AL = (unsigned char)a_motor1;
 200:	10 82       	st	Z, r1
 202:	f8 01       	movw	r30, r16
	OCR5BL = (unsigned char)b_motor1;
 204:	10 82       	st	Z, r1
 206:	18 82       	st	Y, r1
	OCR5CL = (unsigned char)c_motor1;
 208:	ff ef       	ldi	r31, 0xFF	; 255
 20a:	2f ef       	ldi	r18, 0xFF	; 255
 20c:	89 e5       	ldi	r24, 0x59	; 89
 20e:	f1 50       	subi	r31, 0x01	; 1
 210:	20 40       	sbci	r18, 0x00	; 0
 212:	80 40       	sbci	r24, 0x00	; 0
 214:	e1 f7       	brne	.-8      	; 0x20e <main+0x58>
 216:	00 c0       	rjmp	.+0      	; 0x218 <main+0x62>
 218:	00 00       	nop
		_delay_ms(2000);
		all_in_one_velocity(0,0,0);
		_delay_ms(2000);
		
		
		forward();
 21a:	a3 df       	rcall	.-186    	; 0x162 <forward>
 21c:	9f ef       	ldi	r25, 0xFF	; 255
 21e:	ef ef       	ldi	r30, 0xFF	; 255
 220:	f6 e8       	ldi	r31, 0x86	; 134
 222:	91 50       	subi	r25, 0x01	; 1
 224:	e0 40       	sbci	r30, 0x00	; 0
 226:	f0 40       	sbci	r31, 0x00	; 0
 228:	e1 f7       	brne	.-8      	; 0x222 <main+0x6c>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <main+0x76>
 22c:	00 00       	nop
 22e:	f7 01       	movw	r30, r14
	OCR5CL = (unsigned char)c_motor;
}

void all_in_one_velocity (unsigned char a_motor1, unsigned char b_motor1, unsigned char c_motor1)
{
	OCR5AL = (unsigned char)a_motor1;
 230:	10 82       	st	Z, r1
 232:	f8 01       	movw	r30, r16
	OCR5BL = (unsigned char)b_motor1;
 234:	10 82       	st	Z, r1
 236:	18 82       	st	Y, r1
	OCR5CL = (unsigned char)c_motor1;
 238:	ff ef       	ldi	r31, 0xFF	; 255
 23a:	2f ef       	ldi	r18, 0xFF	; 255
 23c:	89 e5       	ldi	r24, 0x59	; 89
 23e:	f1 50       	subi	r31, 0x01	; 1
 240:	20 40       	sbci	r18, 0x00	; 0
 242:	80 40       	sbci	r24, 0x00	; 0
 244:	e1 f7       	brne	.-8      	; 0x23e <main+0x88>
 246:	00 c0       	rjmp	.+0      	; 0x248 <main+0x92>
 248:	00 00       	nop
		forward();
		_delay_ms(3000);
		all_in_one_velocity(0,0,0);
		_delay_ms(2000);
		
		backward();
 24a:	94 df       	rcall	.-216    	; 0x174 <backward>
 24c:	9f ef       	ldi	r25, 0xFF	; 255
 24e:	ef ef       	ldi	r30, 0xFF	; 255
 250:	f6 e8       	ldi	r31, 0x86	; 134
 252:	91 50       	subi	r25, 0x01	; 1
 254:	e0 40       	sbci	r30, 0x00	; 0
 256:	f0 40       	sbci	r31, 0x00	; 0
 258:	e1 f7       	brne	.-8      	; 0x252 <main+0x9c>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <main+0xa6>
 25c:	00 00       	nop
 25e:	f7 01       	movw	r30, r14
	OCR5CL = (unsigned char)c_motor;
}

void all_in_one_velocity (unsigned char a_motor1, unsigned char b_motor1, unsigned char c_motor1)
{
	OCR5AL = (unsigned char)a_motor1;
 260:	10 82       	st	Z, r1
 262:	f8 01       	movw	r30, r16
	OCR5BL = (unsigned char)b_motor1;
 264:	10 82       	st	Z, r1
 266:	18 82       	st	Y, r1
	OCR5CL = (unsigned char)c_motor1;
 268:	ff ef       	ldi	r31, 0xFF	; 255
 26a:	2f ef       	ldi	r18, 0xFF	; 255
 26c:	89 e5       	ldi	r24, 0x59	; 89
 26e:	f1 50       	subi	r31, 0x01	; 1
 270:	20 40       	sbci	r18, 0x00	; 0
 272:	80 40       	sbci	r24, 0x00	; 0
 274:	e1 f7       	brne	.-8      	; 0x26e <main+0xb8>
 276:	00 c0       	rjmp	.+0      	; 0x278 <main+0xc2>
 278:	00 00       	nop
		backward();
		_delay_ms(3000);
		all_in_one_velocity(0,0,0);
		_delay_ms(2000);
		
		right();
 27a:	85 df       	rcall	.-246    	; 0x186 <right>
 27c:	9f ef       	ldi	r25, 0xFF	; 255
 27e:	ef ef       	ldi	r30, 0xFF	; 255
 280:	f6 e8       	ldi	r31, 0x86	; 134
 282:	91 50       	subi	r25, 0x01	; 1
 284:	e0 40       	sbci	r30, 0x00	; 0
 286:	f0 40       	sbci	r31, 0x00	; 0
 288:	e1 f7       	brne	.-8      	; 0x282 <main+0xcc>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <main+0xd6>
 28c:	00 00       	nop
 28e:	f7 01       	movw	r30, r14
	OCR5CL = (unsigned char)c_motor;
}

void all_in_one_velocity (unsigned char a_motor1, unsigned char b_motor1, unsigned char c_motor1)
{
	OCR5AL = (unsigned char)a_motor1;
 290:	10 82       	st	Z, r1
 292:	f8 01       	movw	r30, r16
	OCR5BL = (unsigned char)b_motor1;
 294:	10 82       	st	Z, r1
 296:	18 82       	st	Y, r1
	OCR5CL = (unsigned char)c_motor1;
 298:	ff ef       	ldi	r31, 0xFF	; 255
 29a:	2f ef       	ldi	r18, 0xFF	; 255
 29c:	89 e5       	ldi	r24, 0x59	; 89
 29e:	f1 50       	subi	r31, 0x01	; 1
 2a0:	20 40       	sbci	r18, 0x00	; 0
 2a2:	80 40       	sbci	r24, 0x00	; 0
 2a4:	e1 f7       	brne	.-8      	; 0x29e <main+0xe8>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <main+0xf2>
 2a8:	00 00       	nop
		right();
		_delay_ms(3000);
		all_in_one_velocity(0,0,0);
		_delay_ms(2000);
		
		left();
 2aa:	79 df       	rcall	.-270    	; 0x19e <left>
 2ac:	9f ef       	ldi	r25, 0xFF	; 255
 2ae:	ef ef       	ldi	r30, 0xFF	; 255
 2b0:	f6 e8       	ldi	r31, 0x86	; 134
 2b2:	91 50       	subi	r25, 0x01	; 1
 2b4:	e0 40       	sbci	r30, 0x00	; 0
 2b6:	f0 40       	sbci	r31, 0x00	; 0
 2b8:	e1 f7       	brne	.-8      	; 0x2b2 <main+0xfc>
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <main+0x106>
 2bc:	00 00       	nop
 2be:	f7 01       	movw	r30, r14
	OCR5CL = (unsigned char)c_motor;
}

void all_in_one_velocity (unsigned char a_motor1, unsigned char b_motor1, unsigned char c_motor1)
{
	OCR5AL = (unsigned char)a_motor1;
 2c0:	10 82       	st	Z, r1
 2c2:	f8 01       	movw	r30, r16
	OCR5BL = (unsigned char)b_motor1;
 2c4:	10 82       	st	Z, r1
 2c6:	18 82       	st	Y, r1
	OCR5CL = (unsigned char)c_motor1;
 2c8:	ff ef       	ldi	r31, 0xFF	; 255
 2ca:	2f ef       	ldi	r18, 0xFF	; 255
 2cc:	89 e5       	ldi	r24, 0x59	; 89
 2ce:	f1 50       	subi	r31, 0x01	; 1
 2d0:	20 40       	sbci	r18, 0x00	; 0
 2d2:	80 40       	sbci	r24, 0x00	; 0
 2d4:	e1 f7       	brne	.-8      	; 0x2ce <main+0x118>
 2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <main+0x122>
 2d8:	00 00       	nop
 2da:	80 e0       	ldi	r24, 0x00	; 0
		all_in_one_velocity(0,0,0);
		_delay_ms(2000);
		
		

}
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	df 91       	pop	r29
 2e0:	cf 91       	pop	r28
 2e2:	1f 91       	pop	r17
 2e4:	0f 91       	pop	r16
 2e6:	ff 90       	pop	r15
 2e8:	ef 90       	pop	r14
 2ea:	08 95       	ret

000002ec <_exit>:
 2ec:	f8 94       	cli

000002ee <__stop_program>:
 2ee:	ff cf       	rjmp	.-2      	; 0x2ee <__stop_program>
